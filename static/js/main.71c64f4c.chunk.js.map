{"version":3,"sources":["studyPlan.js","context.js","components/ZETBar.js","components/Course.js","components/Semester.js","App.js","useLocalStorage.js","serviceWorker.js","index.js"],"names":["bySemester","map","i","plan","filter","c","semester","optionalCourses","required","concat","mod","sumOptOf","codes","includes","code","points","reduce","a","b","percOf","sumOf","config","maxPoints","percOptOf","createContext","ZETBar","ctx","useContext","context","get","sum","useMemo","optPercent","addPercent","sumPercent","className","Progress","multi","bar","color","value","Course","course","set","classes","classnames","shadow","textColor","key","Input","type","id","checked","onChange","htmlFor","name","Semester","courses","index","toHtml","semesterPoints","some","App","useState","localStorage","JSON","parse","stringify","newValue","useLocalStorage","Provider","Container","Button","onClick","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71c64f4c.chunk.js","sourcesContent":["import plan from './htmlParser/plan.json';\nimport config from './config';\n\nexport const bySemester = [5, 6, 7, 8].map((i) =>\n    plan.filter((c) => c.semester === i)\n);\n\nexport const optionalCourses = plan\n    .filter((c) => !c.required)\n    .concat(plan.filter((c) => c.mod === '1.53'));\n\nexport const sumOf = (codes) =>\n    plan\n        .filter((c) => codes.includes(c.code))\n        .map((c) => c.points)\n        .reduce((a, b) => a + b, 0);\n\nexport const sumOptOf = (codes) =>\n    optionalCourses\n        .filter((c) => codes.includes(c.code))\n        .map((c) => c.points)\n        .reduce((a, b) => a + b, 0);\n\nexport const percOf = (codes) => (sumOf(codes) / config.maxPoints) * 100;\n\nexport const percOptOf = (codes) => (sumOptOf(codes) / config.maxPoints) * 100;\n\nexport const percAddOf = (codes) => percOf(codes) - percOptOf(codes);\n\nexport const toModuleCode = (courseCode) =>\n    `М.${courseCode.match(/(\\d+\\.\\d+)\\.\\d+/)[1]}`;\n\nexport default plan;\n","import { createContext } from 'react';\n\nexport default createContext({});\n","import React, { useMemo, useContext } from 'react';\nimport { Progress } from 'reactstrap';\nimport config from '../config';\nimport { percAddOf, percOptOf, sumOptOf } from '../studyPlan';\nimport context from '../context';\n\nexport default function ZETBar() {\n    const ctx = useContext(context);\n    const { get } = ctx;\n\n    const sum = useMemo(() => sumOptOf(get), [ctx]);\n    const optPercent = useMemo(() => percOptOf(get), [ctx]);\n    const addPercent = useMemo(() => percAddOf(get), [ctx]);\n    const sumPercent = useMemo(() => optPercent + addPercent, [ctx]);\n\n    return (\n        <header className=\"sticky-top shadow\">\n            <Progress multi className=\"rounded-0\">\n                <Progress bar color=\"primary\" value={optPercent} />\n                <Progress bar color=\"warning\" value={addPercent} />\n            </Progress>\n            <Progress multi className=\"mt-n3 text-center\">\n                <Progress\n                    bar\n                    color=\"transparent\"\n                    value={sumPercent}\n                    className=\"text-right font-weight-bold pr-1\"\n                >\n                    {sum} / {config.maxPoints}\n                </Progress>\n            </Progress>\n        </header>\n    );\n}\n","import React, { useContext } from 'react';\nimport { Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport context from '../context';\n\nexport default function Course({ course, className }) {\n    const ctx = useContext(context);\n    const { get, set } = ctx;\n\n    const inputClick = (code) => {\n        if (get.includes(code)) {\n            set(get.filter((c) => c !== code));\n        } else {\n            set([...get, code]);\n        }\n    };\n\n    const classes = classnames('d-flex', 'py-2', 'h-100', {\n        'bg-light': !get.includes(course.code),\n        shadow: !get.includes(course.code),\n        'shadow-sm': get.includes(course.code),\n    });\n\n    const textColor = get.includes(course.code)\n        ? 'text-secondary'\n        : 'text-primary';\n\n    return (\n        <div className={className} key={course.code}>\n            <Input\n                type=\"checkbox\"\n                id={course.code}\n                checked={get.includes(course.code)}\n                onChange={() => inputClick(course.code)}\n                className=\"d-none\"\n            />\n            <label htmlFor={course.code} className={classes}>\n                <div className=\"d-flex flex-column px-3\">\n                    <h3 className={`m-0 text-center ${textColor}`}>\n                        {course.points}\n                    </h3>\n                    <small className=\"m-0\">ЗЕТ</small>\n                </div>\n                <div className=\"d-flex flex-column pr-3\">\n                    <p className={`m-0 ${textColor}`}>{course.name}</p>\n                    <p className=\"m-0 text-secondary\">Модуль {course.mod}</p>\n                </div>\n            </label>\n        </div>\n    );\n}\n\nCourse.propTypes = {\n    course: PropTypes.shape({\n        code: PropTypes.string.isRequired,\n        mod: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        points: PropTypes.number.isRequired,\n    }).isRequired,\n    className: PropTypes.string.isRequired,\n};\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Course from './Course';\nimport { optionalCourses } from '../studyPlan';\nimport context from '../context';\nimport config from '../config';\n\nexport default function Semester({ courses, index }) {\n    const toHtml = (c) => (\n        <Course\n            className=\"col-lg-4 col-sm-6 px-1 py-1\"\n            course={c}\n            key={c.code}\n        />\n    );\n\n    const { get } = useContext(context);\n\n    const groupByFilter = (filter) =>\n        courses.some(filter) ? (\n            <div>\n                <div className=\"m-2\">\n                    <div className=\"row\">\n                        {courses.filter(filter).map(toHtml)}\n                    </div>\n                </div>\n            </div>\n        ) : null;\n\n    return (\n        <div key={index}>\n            <h3>{`Семестр ${index + 5}`}</h3>\n            <p>\n                {courses\n                    .filter((c) => get.includes(c.code))\n                    .map((c) => c.points)\n                    .reduce((a, b) => a + b, 0)}{' '}\n                / {config.semesterPoints[index]}\n            </p>\n            <div className=\"mb-5\">\n                {groupByFilter((c) => optionalCourses.includes(c))}\n            </div>\n        </div>\n    );\n}\n\nSemester.propTypes = {\n    courses: PropTypes.arrayOf(\n        PropTypes.shape({\n            required: PropTypes.bool.isRequired,\n        }).isRequired\n    ).isRequired,\n    index: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport { Container, Button } from 'reactstrap';\nimport { bySemester } from './studyPlan';\nimport useLocalStorage from './useLocalStorage';\nimport ZETBar from './components/ZETBar';\nimport Context from './context';\nimport Semester from './components/Semester';\n\nexport default function App() {\n    const [get, set] = useLocalStorage('selected', []);\n\n    const reset = () => set([]);\n\n    return (\n        <div className=\"App\">\n            <Context.Provider value={{ get, set }}>\n                <ZETBar />\n                <Container>\n                    <div className=\"d-flex\">\n                        <div className=\"mt-3 d-flex flex-column flex-sm-row\">\n                            <h2 className=\"mr-3 mb-0\">Калькулятор ЗЕТ</h2>\n                            <div>\n                                <Button\n                                    className=\"m-1 btn-light btn-outline-danger\"\n                                    onClick={reset}\n                                >\n                                    Сброс\n                                </Button>\n                                <Button\n                                    className=\"m-1 btn-light btn-outline-dark\"\n                                    href=\"https://github.com/finkrer/zet\"\n                                >\n                                    Github\n                                </Button>\n                            </div>\n                        </div>\n                    </div>\n                    {bySemester &&\n                        bySemester.map((courses, i) => (\n                            <Semester courses={courses} index={i} key={i} />\n                        ))}\n                </Container>\n            </Context.Provider>\n        </div>\n    );\n}\n","import { useState } from 'react';\n\nexport default function useLocalStorage(name, value) {\n    const [get, set] = useState(\n        localStorage[name] ? JSON.parse(localStorage[name]) : value\n    );\n\n    if (!localStorage[name]) localStorage[name] = JSON.stringify(get);\n\n    const newSet = (newValue) => {\n        localStorage[name] = JSON.stringify(newValue);\n        set(newValue);\n    };\n\n    return [get, newSet];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}